package me.jadc.jadbreaks.cmd;

import java.time.Duration;
import java.time.Instant;

import org.bukkit.Location;
import org.bukkit.Sound;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;

import me.jadc.jadbreaks.objects.Perk;
import me.jadc.jadbreaks.tools.Conf;
import me.jadc.jadbreaks.tools.Effects;
import me.jadc.jadbreaks.tools.Message;
import net.md_5.bungee.api.ChatColor;

public class Warper implements CommandExecutor, Listener {

	int count = 50;

	@Override
	public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {

		if (!(sender instanceof Player))
			return true;

		Player p = (Player) sender;

		if (!Perk.hasPerk(p, "Warper")) {
			Message.noPerk(p);
			return true;
		}

		if (Conf.playerData.getConfig().contains(p.getUniqueId() + ".lastDamaged")) {
			Instant before = Instant.parse(Conf.playerData.getConfig().getString(p.getUniqueId() + ".lastDamaged"));
			Instant after = Instant.now();
			if (Duration.between(before, after).toMillis() <= 60000) {
				p.sendMessage(ChatColor.RED + "You have taken damage too recently to warp.");
				p.sendMessage(ChatColor.RED + "Wait " + ((60000 - Duration.between(before, after).toMillis()) / 1000)
						+ " more seconds.");
				return true;
			}
		}

		if (args.length != 2) {
			Message.invalidArgs(p, "/warp " + ChatColor.UNDERLINE + "<set/to/del> <name>");
			return true;
		}

		// Place name
		String name = args[1].toLowerCase();

		if(args[0].equalsIgnoreCase("set")) {
			// Setting warp
			Conf.warpData.getConfig().set(name + ".owner", p.getUniqueId().toString());
			Conf.warpData.getConfig().set(name + ".location", p.getLocation());
			Conf.warpData.save();
			p.sendMessage("Set warp \"" + name + "\" to " + p.getLocation().getBlockX() + ", " + p.getLocation().getBlockY() + ", " + p.getLocation().getBlockZ());
		}
		
		if(args[0].equalsIgnoreCase("to")) {
			// Warping to
			if(!Conf.warpData.getConfig().contains(name)) {
				Message.error(p, "Invalid warp");
				return true;
			}

			// Teleporting to warp
			Location warpLoc = (Location) Conf.warpData.getConfig().get(name + ".location");

			// Effects and Teleport
			p.addPotionEffect(new PotionEffect(PotionEffectType.SLOW, 2, 255, true));
			Effects.emitColoredParticle(p.getLocation(), count, 0.2, 0.8, 0.2, 255, 0, 255);
			Effects.playSound(p.getLocation(), Sound.ENTITY_ENDERMAN_TELEPORT, 1, 1);
			if (Math.random() < 0.05) p.getWorld().spawnEntity(p.getLocation(), EntityType.ENDERMITE);
			p.teleport(warpLoc);
			p.sendMessage("You have arrived at " + name + "...");
			Effects.emitColoredParticle(p.getLocation(), count, 0.2, 0.8, 0.2, 255, 0, 255);
			Effects.playSound(p.getLocation(), Sound.ENTITY_ENDERMAN_TELEPORT, 1, 1);
		}
		
		if(args[0].equalsIgnoreCase("del") || args[0].equalsIgnoreCase("delete")) {
			// Deleting warp
			if(Conf.warpData.getConfig().getString(name + ".owner").equals(p.getUniqueId().toString())) {
				// Is owner of warp
				Conf.warpData.getConfig().set(name, null);
				Conf.warpData.save();
				p.sendMessage("The warp has been deleted.");
			}else {
				Message.error(p, "Invalid warp, or you do not own it");
			}
		}

		return true;
	}

	// Last damage event
	@EventHandler
	public void onPlayerDamage(EntityDamageEvent e) {
		if (e.getEntity() instanceof Player) {
			Player p = (Player) e.getEntity();
			Conf.playerData.getConfig().set(p.getUniqueId() + ".lastDamaged", Instant.now().toString());
			Conf.playerData.save();
		}
	}
}
